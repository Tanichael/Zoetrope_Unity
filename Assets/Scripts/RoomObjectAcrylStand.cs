using UniRx;
using System.Collections.Generic;
using UnityEngine;

public class RoomObjectAcrylStand : RoomObjectMovable
{
    [SerializeField] private MeshFilter m_MeshFilter;
    [SerializeField] private List<TappableBehaviour> m_TappableBehaviours;
    [SerializeField] private List<MeshRenderer> m_AcrylMeshList;
    [SerializeField] private Material m_AcrylMaterial;

    public List<MeshRenderer> AcrylMeshList => m_AcrylMeshList;

    private int m_SelectedIndex = 0;

    private GameObject m_SideObject;

    public override void SetTexture(Texture2D trimmedTexture, SetMaterialEvent setMaterialEvent)
    {
        base.SetTexture(trimmedTexture, setMaterialEvent);
        for(int i = 0; i < m_AcrylMeshList.Count; i++) 
        {
            MeshRenderer acrylMeshRenderer = m_AcrylMeshList[i];
            if (acrylMeshRenderer != setMaterialEvent.MeshRenderer)
            {
                //左右反転処理
                Debug.Log("裏面");
                acrylMeshRenderer.material.mainTexture = trimmedTexture;
                acrylMeshRenderer.material.mainTextureScale = new Vector2(-1f, 1f);
            }
            else
            {
                Debug.Log("表面");
                m_SelectedIndex = i;
                acrylMeshRenderer.material.mainTexture = trimmedTexture;
            }
        }
        MakeSideObject(trimmedTexture);
    }

    private void MakeSideObject(Texture2D trimmedTexture)
    {
        if (m_SideObject != null)
        {
            Destroy(m_SideObject);
        }
        m_SideObject = new GameObject("SideObject");
        m_SideObject.transform.parent = transform;
        MeshCreatorData mcd = m_SideObject.AddComponent<MeshCreatorData>() as MeshCreatorData;
        mcd.outlineTexture = trimmedTexture;
        mcd.useAutoGeneratedMaterial = true;

        if (trimmedTexture.height != trimmedTexture.width)
        {
            float height = trimmedTexture.height;
            float width = trimmedTexture.width;
            if (height > width)
            {
                mcd.meshHeight = 1.0f;
                mcd.meshWidth = width / height;
            }
            else
            {
                mcd.meshHeight = height / width;
                mcd.meshWidth = 1.0f;
            }
        }
        else
        {
            mcd.meshHeight = 1.0f;
            mcd.meshWidth = 1.0f;
        }

        mcd.meshDepth = 1.0f;

        mcd.uvWrapMesh = true;
        mcd.createEdges = false;
        mcd.createBacksidePlane = false;
        mcd.generateCollider = true;
        mcd.usePrimitiveCollider = true;
        mcd.useAABBCollider = false;
        mcd.maxNumberBoxes = 20;
        mcd.usePhysicMaterial = false;

        MeshCreator.UpdateMesh(m_SideObject, mcd, m_SideObject.transform, m_SideObject.transform.rotation, m_SideObject.transform.localScale, false);
        MeshRenderer meshRenderer = m_SideObject.GetComponent<MeshRenderer>();
        if (meshRenderer != null)
        {
            meshRenderer.sharedMaterial = m_AcrylMaterial;
        }
        //大きさ、向き、位置の調節
        m_SideObject.transform.localPosition = new Vector3(0f, 0.128f, 0f);
        m_SideObject.transform.localRotation = Quaternion.Euler(0f, 90f, 0f);
        m_SideObject.transform.localScale = new Vector3(0.21f, 0.21f, 0.004f);
    }

    public override void Init(RoomObjectData data, int roomIndex, PutType putType)
    {
        base.Init(data, roomIndex, putType);
        foreach (var tappable in m_TappableBehaviours)
        {
            tappable.OnTapBehaviour.Subscribe((materialNum) =>
            {
                m_OnSetMaterialSubject.OnNext(new SetMaterialEvent(this, m_MeshFilter, m_AcrylMeshList[0], materialNum));
            }).AddTo(this);
        }
        SetTexture((Texture2D)m_AcrylMeshList[0].material.mainTexture, new SetMaterialEvent(this, m_MeshFilter, m_AcrylMeshList[0], 0));
    }

    public override void Init(SaveDataUnit saveDataUnit, RoomMasterData roomMasterData, RoomObjectMasterData roomObjectMasterData)
    {
        base.Init(saveDataUnit, roomMasterData, roomObjectMasterData);
        foreach (var tappable in m_TappableBehaviours)
        {
            tappable.OnTapBehaviour.Subscribe((materialNum) =>
            {
                m_OnSetMaterialSubject.OnNext(new SetMaterialEvent(this, m_MeshFilter, m_AcrylMeshList[m_SelectedIndex], materialNum));
            }).AddTo(this);
        }
        Texture2D trimmedTexture = new Texture2D(2, 2);
        trimmedTexture.LoadImage(saveDataUnit.TextureBytes);
        SetTexture(trimmedTexture, new SetMaterialEvent(this, m_MeshFilter, m_AcrylMeshList[m_SelectedIndex], 0));

    }
}
