using UnityEngine;
using System;
using System.Threading;
using Cysharp.Threading.Tasks;
using UnityEngine.UI;
using UniRx;

public class MeshCreatorTestController : MonoBehaviour
{
    [SerializeField] private Texture2D m_TestTexture;
    [SerializeField] private Material m_AcrylMaterial;
    [SerializeField] private Button m_CreateButton;

    private CancellationToken m_Token;
    private GameObject m_TestObject;
    private MeshCreatorData m_Mcd;

    // Start is called before the first frame update
    void Start()
    {
        m_Token = this.GetCancellationTokenOnDestroy();
        m_TestObject = new GameObject("TestObject");
        m_Mcd = m_TestObject.AddComponent<MeshCreatorData>() as MeshCreatorData;
        m_Mcd.outlineTexture = m_TestTexture;
        m_Mcd.useAutoGeneratedMaterial = true;

        if (m_TestTexture.height != m_TestTexture.width)
        {
            float height = m_TestTexture.height;
            float width = m_TestTexture.width;
            if (height > width)
            {
                m_Mcd.meshHeight = 1.0f;
                m_Mcd.meshWidth = width / height;
            }
            else
            {
                m_Mcd.meshHeight = height / width;
                m_Mcd.meshWidth = 1.0f;
            }
        }
        else
        {
            m_Mcd.meshHeight = 1.0f;
            m_Mcd.meshWidth = 1.0f;
        }

        m_Mcd.meshDepth = 1.0f;

        m_Mcd.uvWrapMesh = true;
        m_Mcd.createEdges = false;
        m_Mcd.createBacksidePlane = false;
        m_Mcd.generateCollider = true;
        m_Mcd.usePrimitiveCollider = true;
        m_Mcd.useAABBCollider = false;
        m_Mcd.maxNumberBoxes = 20;
        m_Mcd.usePhysicMaterial = false;

        m_CreateButton.onClick.AsObservable().Subscribe(_ =>
        {
            MeshCreator.UpdateMesh(m_TestObject, m_Mcd, m_TestObject.transform, m_TestObject.transform.rotation, m_TestObject.transform.localScale, false);
            MeshRenderer meshRenderer = m_TestObject.GetComponent<MeshRenderer>();
            if (meshRenderer != null)
            {
                meshRenderer.sharedMaterial = m_AcrylMaterial;
            }
            m_TestObject.transform.localScale = new Vector3(1f, 1f, 0.02f);

            //UpdateMeshAsync(m_TestObject, m_Token).Forget();
        }).AddTo(this);
    }

    // Update is called once per frame
    void Update()
    {
        /*if(Input.GetKeyDown(KeyCode.Space))
        {
            //ê∂ê¨
            MeshCreator.UpdateMesh(m_TestObject, m_Mcd, false);
            MeshRenderer meshRenderer = m_TestObject.GetComponent<MeshRenderer>();
            if(meshRenderer != null)
            {
                meshRenderer.sharedMaterial = m_AcrylMaterial;
            }
            m_TestObject.transform.localScale = new Vector3(1f, 1f, 0.02f);
            //UpdateMeshAsync(m_TestObject, m_Token).Forget();
        }*/
    }

    private async UniTask UpdateMeshAsync(GameObject testObject, CancellationToken token)
    {
        Transform mcTransform = testObject.transform;
        Quaternion mcRotation = mcTransform.rotation;
        Vector3 mcLocalScale = mcTransform.localScale;
        await UniTask.RunOnThreadPool(() => 
        {
            MeshCreator.UpdateMesh(testObject, m_Mcd, mcTransform, mcRotation, mcLocalScale, false);
        }, cancellationToken: token);

        MeshRenderer meshRenderer = testObject.GetComponent<MeshRenderer>();
        if (meshRenderer != null)
        {
            meshRenderer.sharedMaterial = m_AcrylMaterial;
        }
    }
}
